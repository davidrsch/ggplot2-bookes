# Otra estéticas {#sec-scale-other}

```{r}
#| echo: false
#| message: false
#| results: asis
source("common.R")
status("polishing")
```

Además de la posición y el color, existen otras estéticas que ggplot2 puede utilizar para representar datos. En este capítulo veremos escalas de tamaño (@sec-scale-size), escalas de forma (@sec-scale-shape), escalas de ancho de línea (@sec-scale-linewidth) y escalas de tipo de línea (@sec-scale-linetype), que utilizan características visuales distintas de la ubicación y el color para representar valores de datos. Además, hablaremos de escalas manuales (@sec-scale-manual) y escalas de identidad (@sec-scale-identity): estas no necesariamente utilizan características visuales diferentes, pero construyen mapeos de datos de una manera inusual.

## Tamaño {#sec-scale-size}

\index{Size}

```{r}
#| echo: false
planets <- data.frame(
  name = c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"),
  type = c(rep("Inner", 4), rep("Outer", 4)),
  position = 1:8,
  radius = c(2440, 6052, 6378, 3390, 71400, 60330, 25559, 24764),
  orbit = c(57900000, 108200000, 149600000, 227900000, 778300000, 1427000000, 2871000000, 4497100000)
#  mass = c(3.3022e+23, 4.8685e+24, 5.9736e+24, 6.4185e+23, 1.8986e+27, 5.6846e+26, 8.681e+25, 1.0243e+26)
)
planets$name <- with(planets, factor(name, name))
```

La estética del tamaño se utiliza normalmente para escalar puntos y texto. La escala predeterminada para la estética del tamaño es `scale_size()` en la que un aumento lineal en la variable se asigna a un aumento lineal en el área (no el radio) de la geom. La escala en función del área es un valor predeterminado sensato, ya que la percepción humana del tamaño se imita más estrechamente con la escala de área que con la escala de radio. De forma predeterminada, el valor más pequeño de los datos (más precisamente en los límites de escala) se asigna a un tamaño de 1 y el más grande se asigna a un tamaño de 6. El argumento `range` le permite escalar el tamaño de las geomas:

```{r}
#| layout-ncol: 2
#| fig-width: 4
base <- ggplot(mpg, aes(displ, hwy, size = cyl)) + 
  geom_point()

base
base + scale_size(range = c(1, 2))
```

Hay varias escalas de tamaño que vale la pena mencionar brevemente:

-   `scale_size_area()` y `scale_size_binned_area()` son versiones de `scale_size()` y `scale_size_binned()` que garantizan que un valor de 0 se asigne a un área de 0.

-   `scale_radius()` asigna el valor de los datos al radio en lugar de al área (@sec-radius-scaling).

-   `scale_size_binned()` es una escala de tamaño que se comporta como `scale_size()` pero asigna valores continuos a categorías de tamaño discretas, análogas a las escalas de posición y color agrupadas analizadas en @sec-binned-position y @sec-binned-color respectivamente. Las leyendas asociadas con esta escala se analizan en @sec-guide-bins.

-   `scale_size_date()` y `scale_size_datetime()` están diseñados para manejar datos de fechas, de forma análoga a las escalas de fechas analizadas en @sec-date-scales.

### Escalas de tamaño de radio {#sec-radius-scaling}

Hay situaciones en las que el escalado de área no es deseable y para tales situaciones se proporciona la función `scale_radius()`. Para ilustrar cuándo es apropiado `scale_radius()`, considere un conjunto de datos que contiene datos astronómicos que incluyen el radio de diferentes planetas:

```{r}
planets
```

En este caso, un gráfico que utiliza la estética del tamaño para representar el radio de los planetas debe usar `scale_radius()` en lugar del `scale_size()` predeterminado. También es importante en este caso establecer los límites de escala para que un planeta con radio 0 se dibuje con un disco con radio 0.

```{r}
#| layout-ncol: 2
#| fig-width: 4
base <- ggplot(planets, aes(1, name, size = radius)) + 
  geom_point() + 
  scale_x_continuous(breaks = NULL) + 
  labs(x = NULL, y = NULL, size = NULL)
  
base + ggtitle("not to scale")
base + 
  scale_radius(limits = c(0, NA), range = c(0, 10)) + 
  ggtitle("to scale")
```

A la izquierda es difícil distinguir Júpiter de Saturno, a pesar de que la diferencia entre ambos debería ser el doble del tamaño de la Tierra; Compare esto con el gráfico de la derecha, donde el radio de Júpiter es visiblemente mayor.

### Escalas de tamaño agrupadas {#sec-guide-bins}

Las escalas de tamaño agrupadas funcionan de manera similar a las escalas agrupadas para la estética del color y la posición (@sec-binned-color y @sec-binned-position). Una diferencia es cómo se muestran las leyendas. La leyenda predeterminada para una escala de tamaño agrupada, y todas las escalas agrupadas, excepto la estética de posición y color, se rige por `guide_bins()`. Por ejemplo, en los datos `mpg` podríamos usar `scale_size_binned()` para crear una versión agrupada de la variable continua `hwy`:

```{r}
base <- ggplot(mpg, aes(displ, manufacturer, size = hwy)) +
  geom_point(alpha = .2) +
  scale_size_binned()

base
```

A diferencia de `guide_legend()`, la guía creada para una escala agrupada por `guide_bins()` no organiza las claves individuales en una tabla. En lugar de ello, están organizados en una columna (o fila) a lo largo de un único eje vertical (u horizontal), que de forma predeterminada se muestra con su propio eje. Los argumentos importantes para `guide_bins()` se enumeran a continuación:

-   `axis` indica si se debe dibujar el eje (el valor predeterminado es `TRUE`)

    ```{r}
    base + guides(size = guide_bins(axis = FALSE))
    ```

-   `direction` es una cadena de caracteres que especifica la dirección de la guía, ya sea `"vertical"` (por defecto) o `"horizontal"`

    ```{r}
    base + guides(size = guide_bins(direction = "horizontal"))
    ```

-   `show.limits` especifica si se muestran marcas en los extremos del eje guía (el valor predeterminado es `FALSE`)

    ```{r}
    base + guides(size = guide_bins(show.limits = TRUE))
    ```

-   `axis.colour`, `axis.linewidth` y `axis.arrow` se utilizan para controlar el eje guía que se muestra junto a las entradas de la leyenda

    ```{r}
    base + guides(
      size = guide_bins(
        axis.colour = "red",
        axis.arrow = arrow(
          length = unit(.1, "inches"), 
          ends = "first", 
          type = "closed"
        )
      )
    )
    ```

-   `keywidth`, `keyheight`, `reverse` y `override.aes` tienen el mismo comportamiento para `guide_bins()` com para `guide_legend()` (see @sec-guide-legend)

## Forma {#sec-scale-shape}

Los valores se pueden asignar a la estética de la forma. El uso típico de esto es cuando tiene una pequeña cantidad de categorías discretas: si la variable de datos contiene más de 6 valores, resulta difícil distinguir entre formas y generará una advertencia. La función predeterminada `scale_shape()` contiene un solo argumento: establezca `solid = TRUE` (el valor predeterminado) para usar una "paleta" que consta de tres formas sólidas y tres formas huecas, o establezca `solid = FALSE` para usar seis formas huecas formas:

```{r}
#| layout-ncol: 2
#| fig-width: 4
base <- ggplot(mpg, aes(displ, hwy, shape = factor(cyl))) + 
  geom_point()

base
base + scale_shape(solid = FALSE)
```

Aunque es poco probable que un gráfico sea legible con más de 6 marcadores distintos, hay 25 formas posibles para elegir, cada una asociada con un valor entero:

```{r}
#| echo: false
df <- data.frame(
  shape = 1:25,
  x = (0:24) %% 13,
  y = 2 - floor((0:24)/13)
)
ggplot(df, aes(x, y, shape = shape)) + 
  geom_point(size = 4) + 
  geom_text(aes(label = shape), nudge_y = .3) + 
  theme_void() +
  scale_shape_identity() +
  ylim(.8, 2.5)
```

Puede especificar los tipos de marcador para cada valor de datos manualmente usando `scale_shape_manual()`:

```{r}
base + 
  scale_shape_manual(
    values = c("4" = 16, "5" = 17, "6" = 1 , "8" = 2)
  )
```

Para obtener más información sobre básculas manuales, consulte @sec-scale-manual.

## Ancho de línea {#sec-scale-linewidth}

La estética del ancho de línea, introducida en ggplot2 3.4.0, se utiliza para controlar el ancho de las líneas. En versiones anteriores de ggplot2 se usaba la estética del tamaño para este propósito, lo que causaba algunas dificultades para geoms complejas como `geom_pointrange()` que contienen tanto puntos como líneas. Para estas geoms suele ser importante poder controlar por separado el tamaño de los puntos y el ancho de las líneas. Esto se ilustra en los gráficos siguientes. En el gráfico más a la izquierda, tanto la estética del tamaño como del ancho de línea se establecen en sus valores predeterminados. El gráfico del medio aumenta el tamaño de los puntos sin cambiar el ancho de línea, mientras que el gráfico de la derecha aumenta el ancho de línea sin cambiar el tamaño de los puntos.

```{r}
#| layout-ncol: 3
#| fig-width: 3
base <- ggplot(airquality, aes(x = factor(Month), y = Temp))

base + geom_pointrange(stat = "summary", fun.data = "median_hilow")
base + geom_pointrange(
  stat = "summary", 
  fun.data = "median_hilow", 
  size = 2
)
base + geom_pointrange(
  stat = "summary", 
  fun.data = "median_hilow", 
  linewidth = 2
)
```

En la práctica, lo más probable es que establezcas el ancho de línea como un parámetro fijo, como se muestra en el ejemplo anterior, pero es una verdadera estética y se puede asignar a valores de datos:

```{r}
ggplot(airquality, aes(Day, Temp, group = Month)) + 
  geom_line(aes(linewidth = Month)) + 
  scale_linewidth(range = c(0.5, 3))
```

Las escalas de ancho de línea se comportan como escalas de tamaño en la mayoría de los casos, pero existen diferencias. Como se analizó anteriormente, el comportamiento predeterminado de una escala de tamaño es aumentar linealmente con el área del marcador de trazado (por ejemplo, el diámetro de un marcador de trazado circular aumenta con la raíz cuadrada del valor de los datos). Por el contrario, el ancho de línea aumenta linealmente con el valor de los datos.

Se pueden agregar escalas de ancho de línea agrupadas usando `scale_linewidth_binned()`.

## Tipo de línea {#sec-scale-linetype}

Es posible asignar una variable a la estética del tipo de línea en ggplot2. Esto funciona mejor para variables discretas con una pequeña cantidad de categorías, y `scale_linetype()` es un alias para `scale_linetype_discrete()`. Las variables continuas no se pueden asignar a tipos de línea a menos que se use `scale_linetype_binned()`: aunque existe una función `scale_linetype_continuous()`, lo único que hace es producir un error. Para ver por qué la estética del tipo de línea es adecuada sólo para casos con unas pocas categorías, considere este gráfico:

```{r}
ggplot(economics_long, aes(date, value01, linetype = variable)) +
  geom_line()
```

Con cinco categorías, la gráfica es bastante difícil de leer y es poco probable que quieras utilizar la estética del tipo de línea para más que eso. La "paleta" predeterminada para el tipo de línea la proporciona la función `scales::linetype_pal()` e incluye los 13 tipos de línea que se muestran a continuación:

```{r}
df <- data.frame(value = letters[1:13])
base <- ggplot(df, aes(linetype = value)) +
  geom_segment(
    mapping = aes(x = 0, xend = 1, y = value, yend = value),
    show.legend = FALSE
  ) +
  theme(panel.grid = element_blank()) +
  scale_x_continuous(NULL, NULL) 

base
```

Puede controlar el tipo de línea especificando una cadena con hasta 8 valores hexadecimales (es decir, de 0 a F). En esta especificación, el primer valor es la longitud del primer segmento de línea, el segundo valor es la longitud del primer espacio entre segmentos, y así sucesivamente. Esto le permite especificar sus propios tipos de línea usando `scale_linetype_manual()`, o alternativamente, pasando una función personalizada al argumento `palette`:

```{r}
linetypes <- function(n) {
  types <- c("55",  "75", "95", "1115", "111115", "11111115",
             "5158", "9198", "c1c8")
  return(types[seq_len(n)])
}

base + scale_linetype(palette = linetypes)
```

Tenga en cuenta que las últimas cuatro líneas están en blanco, porque la función `linetypes()` definida anteriormente devuelve `NA` cuando el número de categorías excede 9. La función `scale_linetype()` contiene un argumento `na.value` usado para especificar qué Se traza un tipo de línea para estos valores. De forma predeterminada, esto produce una línea en blanco, pero puede anular esto configurando `na.value = "dotted"`:

```{r}
base + scale_linetype(palette = linetypes, na.value = "dotted")
```

Los tipos de línea válidos se pueden configurar utilizando una cadena de caracteres legible por humanos: `"blank"` para una línea de color blanco, `"solid"` para una línea de color negro, `"dashed"` para una línea discontinua, `"dotted"` para una línea de puntos, `"dotdash"` para una línea que alterna entre discontinua y puntos, `"longdash"` para una línea discontinua con fragmentos más largos, y`"twodash"` para una línea que alterna entre discontinua con fragmentos cortos y largos.

## Escala manual {#sec-scale-manual}

Las escalas manuales son solo una lista de valores válidos que se asignan a valores discretos únicos. Si desea personalizar estas escalas, necesita crear su propia escala nueva con la versión "manual" de cada una: `scale_linetype_manual()`, `scale_shape_manual()`, `scale_colour_manual()`, etc. La escala manual tiene una argumento importante, `values`, donde especifica los valores que la escala debe producir si se nombra este vector, hará coincidir los valores de la salida con los valores de la entrada; de lo contrario, coincidirá en el orden de los niveles de la variable discreta. Necesitará algunos conocimientos de los valores estéticos válidos, que se describen en `vignette("ggplot2-specs")`. \index{Shape} \index{Line type} \indexf{scale\_shape\_manual} \indexf{scale\_colour\_manual} \indexf{scale\_linetype\_manual}

Las escalas manuales aparecieron antes, en @sec-manual-color y @sec-scale-shape. En este ejemplo, mostraremos un uso creativo de `scale_colour_manual()` para mostrar múltiples variables en el mismo gráfico y mostrar una leyenda útil. En la mayoría de los sistemas de trazado, colorearías las líneas y luego agregarías una leyenda: \index{Data!longitudinal}

```{r}
#| label: fig-huron

huron <- data.frame(year = 1875:1972, level = as.numeric(LakeHuron))

ggplot(huron, aes(year)) +
  geom_line(aes(y = level + 5), colour = "red") +
  geom_line(aes(y = level - 5), colour = "blue")
```

Eso no funciona en ggplot porque no hay forma de agregar una leyenda manualmente. En su lugar, asigne etiquetas informativas a las líneas:

```{r}
#| label: fig-huron2

ggplot(huron, aes(year)) +
  geom_line(aes(y = level + 5, colour = "above")) +
  geom_line(aes(y = level - 5, colour = "below"))
```

Y luego dile a la escala cómo asignar etiquetas a colores:

```{r}
#| label: fig-huron3

ggplot(huron, aes(year)) +
  geom_line(aes(y = level + 5, colour = "above")) +
  geom_line(aes(y = level - 5, colour = "below")) +
  scale_colour_manual("Direction",
    values = c("above" = "red", "below" = "blue")
  )
```

## Escalas de identidad {#sec-scale-identity}

Las escalas de identidad, como `scale_colour_identity()` y `scale_shape_identity()`, se utilizan cuando los datos ya están escalados de manera que los datos y los espacios estéticos sean los mismos. El siguiente código muestra un ejemplo en el que la escala de identidad es útil. `luv_colours` contiene las ubicaciones de todos los colores integrados de R en el espacio de color LUV (el espacio en el que se basa HCL). Una leyenda es innecesaria, porque el color del punto se representa a sí mismo: los datos y los espacios estéticos son los mismos. \index{Scales!identity} \indexf{scale\_identity}

```{r}
#| label: scale-identity
head(luv_colours)

ggplot(luv_colours, aes(u, v)) + 
geom_point(aes(colour = col), size = 3) + 
scale_color_identity() + 
coord_equal()
```
